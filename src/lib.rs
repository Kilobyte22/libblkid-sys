/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 25;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 0;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UINTN_IDENTITY_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timeval_defined: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const BLKID_VERSION: &'static [u8; 7usize] = b"2.29.2\x00";
pub const BLKID_DATE: &'static [u8; 12usize] = b"22-Feb-2017\x00";
pub const BLKID_DEV_FIND: ::std::os::raw::c_uint = 0;
pub const BLKID_DEV_CREATE: ::std::os::raw::c_uint = 1;
pub const BLKID_DEV_VERIFY: ::std::os::raw::c_uint = 2;
pub const BLKID_DEV_NORMAL: ::std::os::raw::c_uint = 3;
pub const BLKID_SUBLKS_LABEL: ::std::os::raw::c_uint = 2;
pub const BLKID_SUBLKS_LABELRAW: ::std::os::raw::c_uint = 4;
pub const BLKID_SUBLKS_UUID: ::std::os::raw::c_uint = 8;
pub const BLKID_SUBLKS_UUIDRAW: ::std::os::raw::c_uint = 16;
pub const BLKID_SUBLKS_TYPE: ::std::os::raw::c_uint = 32;
pub const BLKID_SUBLKS_SECTYPE: ::std::os::raw::c_uint = 64;
pub const BLKID_SUBLKS_USAGE: ::std::os::raw::c_uint = 128;
pub const BLKID_SUBLKS_VERSION: ::std::os::raw::c_uint = 256;
pub const BLKID_SUBLKS_MAGIC: ::std::os::raw::c_uint = 512;
pub const BLKID_SUBLKS_BADCSUM: ::std::os::raw::c_uint = 1024;
pub const BLKID_SUBLKS_DEFAULT: ::std::os::raw::c_uint = 106;
pub const BLKID_FLTR_NOTIN: ::std::os::raw::c_uint = 1;
pub const BLKID_FLTR_ONLYIN: ::std::os::raw::c_uint = 2;
pub const BLKID_USAGE_FILESYSTEM: ::std::os::raw::c_uint = 2;
pub const BLKID_USAGE_RAID: ::std::os::raw::c_uint = 4;
pub const BLKID_USAGE_CRYPTO: ::std::os::raw::c_uint = 8;
pub const BLKID_USAGE_OTHER: ::std::os::raw::c_uint = 16;
pub const BLKID_PARTS_FORCE_GPT: ::std::os::raw::c_uint = 2;
pub const BLKID_PARTS_ENTRY_DETAILS: ::std::os::raw::c_uint = 4;
pub const BLKID_PARTS_MAGIC: ::std::os::raw::c_uint = 8;
pub const BLKID_PROBREQ_LABEL: ::std::os::raw::c_uint = 2;
pub const BLKID_PROBREQ_LABELRAW: ::std::os::raw::c_uint = 4;
pub const BLKID_PROBREQ_UUID: ::std::os::raw::c_uint = 8;
pub const BLKID_PROBREQ_UUIDRAW: ::std::os::raw::c_uint = 16;
pub const BLKID_PROBREQ_TYPE: ::std::os::raw::c_uint = 32;
pub const BLKID_PROBREQ_SECTYPE: ::std::os::raw::c_uint = 64;
pub const BLKID_PROBREQ_USAGE: ::std::os::raw::c_uint = 128;
pub const BLKID_PROBREQ_VERSION: ::std::os::raw::c_uint = 256;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_dev {
    _unused: [u8; 0],
}
/**
 * blkid_dev:
 *
 * The device object keeps information about one device
 */
pub type blkid_dev = *mut blkid_struct_dev;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_cache {
    _unused: [u8; 0],
}
/**
 * blkid_cache:
 *
 * information about all system devices
 */
pub type blkid_cache = *mut blkid_struct_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_probe {
    _unused: [u8; 0],
}
/**
 * blkid_probe:
 *
 * low-level probing setting
 */
pub type blkid_probe = *mut blkid_struct_probe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_topology {
    _unused: [u8; 0],
}
/**
 * blkid_topology:
 *
 * device topology information
 */
pub type blkid_topology = *mut blkid_struct_topology;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_partlist {
    _unused: [u8; 0],
}
/**
 * blkid_partlist
 *
 * list of all detected partitions and partitions tables
 */
pub type blkid_partlist = *mut blkid_struct_partlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_partition {
    _unused: [u8; 0],
}
/**
 * blkid_partition:
 *
 * information about a partition
 */
pub type blkid_partition = *mut blkid_struct_partition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_parttable {
    _unused: [u8; 0],
}
/**
 * blkid_parttable:
 *
 * information about a partition table
 */
pub type blkid_parttable = *mut blkid_struct_parttable;
/**
 * blkid_loff_t:
 *
 * 64-bit signed number for offsets and sizes
 */
pub type blkid_loff_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_tag_iterate {
    _unused: [u8; 0],
}
/**
 * blkid_tag_iterate:
 *
 * tags iterator for high-level (blkid_cache) API
 */
pub type blkid_tag_iterate = *mut blkid_struct_tag_iterate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blkid_struct_dev_iterate {
    _unused: [u8; 0],
}
/**
 * blkid_dev_iterate:
 *
 * devices iterator for high-level (blkid_cache) API
 */
pub type blkid_dev_iterate = *mut blkid_struct_dev_iterate;
extern "C" {
    pub fn blkid_init_debug(mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn blkid_put_cache(cache: blkid_cache);
}
extern "C" {
    pub fn blkid_get_cache(cache: *mut blkid_cache,
                           filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_gc_cache(cache: blkid_cache);
}
extern "C" {
    pub fn blkid_dev_devname(dev: blkid_dev) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_dev_iterate_begin(cache: blkid_cache) -> blkid_dev_iterate;
}
extern "C" {
    pub fn blkid_dev_set_search(iter: blkid_dev_iterate,
                                search_type: *mut ::std::os::raw::c_char,
                                search_value: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_dev_next(iterate: blkid_dev_iterate, dev: *mut blkid_dev)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_dev_iterate_end(iterate: blkid_dev_iterate);
}
extern "C" {
    pub fn blkid_devno_to_devname(devno: dev_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_devno_to_wholedisk(dev: dev_t,
                                    diskname: *mut ::std::os::raw::c_char,
                                    len: usize, diskdevno: *mut dev_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_all(cache: blkid_cache) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_all_new(cache: blkid_cache) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_all_removable(cache: blkid_cache)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_get_dev(cache: blkid_cache,
                         devname: *const ::std::os::raw::c_char,
                         flags: ::std::os::raw::c_int) -> blkid_dev;
}
extern "C" {
    pub fn blkid_get_dev_size(fd: ::std::os::raw::c_int) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_verify(cache: blkid_cache, dev: blkid_dev) -> blkid_dev;
}
extern "C" {
    pub fn blkid_get_tag_value(cache: blkid_cache,
                               tagname: *const ::std::os::raw::c_char,
                               devname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_get_devname(cache: blkid_cache,
                             token: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_tag_iterate_begin(dev: blkid_dev) -> blkid_tag_iterate;
}
extern "C" {
    pub fn blkid_tag_next(iterate: blkid_tag_iterate,
                          type_: *mut *const ::std::os::raw::c_char,
                          value: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_tag_iterate_end(iterate: blkid_tag_iterate);
}
extern "C" {
    pub fn blkid_dev_has_tag(dev: blkid_dev,
                             type_: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_find_dev_with_tag(cache: blkid_cache,
                                   type_: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char)
     -> blkid_dev;
}
extern "C" {
    pub fn blkid_parse_tag_string(token: *const ::std::os::raw::c_char,
                                  ret_type: *mut *mut ::std::os::raw::c_char,
                                  ret_val: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_parse_version_string(ver_string:
                                          *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_get_library_version(ver_string:
                                         *mut *const ::std::os::raw::c_char,
                                     date_string:
                                         *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_encode_string(str: *const ::std::os::raw::c_char,
                               str_enc: *mut ::std::os::raw::c_char,
                               len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_safe_string(str: *const ::std::os::raw::c_char,
                             str_safe: *mut ::std::os::raw::c_char,
                             len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_send_uevent(devname: *const ::std::os::raw::c_char,
                             action: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_evaluate_tag(token: *const ::std::os::raw::c_char,
                              value: *const ::std::os::raw::c_char,
                              cache: *mut blkid_cache)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_evaluate_spec(spec: *const ::std::os::raw::c_char,
                               cache: *mut blkid_cache)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_new_probe() -> blkid_probe;
}
extern "C" {
    pub fn blkid_new_probe_from_filename(filename:
                                             *const ::std::os::raw::c_char)
     -> blkid_probe;
}
extern "C" {
    pub fn blkid_free_probe(pr: blkid_probe);
}
extern "C" {
    pub fn blkid_reset_probe(pr: blkid_probe);
}
extern "C" {
    pub fn blkid_probe_set_device(pr: blkid_probe, fd: ::std::os::raw::c_int,
                                  off: blkid_loff_t, size: blkid_loff_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_get_devno(pr: blkid_probe) -> dev_t;
}
extern "C" {
    pub fn blkid_probe_get_wholedisk_devno(pr: blkid_probe) -> dev_t;
}
extern "C" {
    pub fn blkid_probe_is_wholedisk(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_get_size(pr: blkid_probe) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_probe_get_offset(pr: blkid_probe) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_probe_get_sectorsize(pr: blkid_probe)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn blkid_probe_get_sectors(pr: blkid_probe) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_probe_get_fd(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_known_fstype(fstype: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_superblocks_get_name(idx: usize,
                                      name:
                                          *mut *const ::std::os::raw::c_char,
                                      usage: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_enable_superblocks(pr: blkid_probe,
                                          enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_set_superblocks_flags(pr: blkid_probe,
                                             flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_reset_superblocks_filter(pr: blkid_probe)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_invert_superblocks_filter(pr: blkid_probe)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_filter_superblocks_type(pr: blkid_probe,
                                               flag: ::std::os::raw::c_int,
                                               names:
                                                   *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_filter_superblocks_usage(pr: blkid_probe,
                                                flag: ::std::os::raw::c_int,
                                                usage: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_enable_topology(pr: blkid_probe,
                                       enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_get_topology(pr: blkid_probe) -> blkid_topology;
}
extern "C" {
    pub fn blkid_topology_get_alignment_offset(tp: blkid_topology)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn blkid_topology_get_minimum_io_size(tp: blkid_topology)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn blkid_topology_get_optimal_io_size(tp: blkid_topology)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn blkid_topology_get_logical_sector_size(tp: blkid_topology)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn blkid_topology_get_physical_sector_size(tp: blkid_topology)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn blkid_known_pttype(pttype: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_enable_partitions(pr: blkid_probe,
                                         enable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_reset_partitions_filter(pr: blkid_probe)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_invert_partitions_filter(pr: blkid_probe)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_filter_partitions_type(pr: blkid_probe,
                                              flag: ::std::os::raw::c_int,
                                              names:
                                                  *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_set_partitions_flags(pr: blkid_probe,
                                            flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_get_partitions(pr: blkid_probe) -> blkid_partlist;
}
extern "C" {
    pub fn blkid_partlist_numof_partitions(ls: blkid_partlist)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_partlist_get_table(ls: blkid_partlist) -> blkid_parttable;
}
extern "C" {
    pub fn blkid_partlist_get_partition(ls: blkid_partlist,
                                        n: ::std::os::raw::c_int)
     -> blkid_partition;
}
extern "C" {
    pub fn blkid_partlist_get_partition_by_partno(ls: blkid_partlist,
                                                  n: ::std::os::raw::c_int)
     -> blkid_partition;
}
extern "C" {
    pub fn blkid_partlist_devno_to_partition(ls: blkid_partlist, devno: dev_t)
     -> blkid_partition;
}
extern "C" {
    pub fn blkid_partition_get_table(par: blkid_partition) -> blkid_parttable;
}
extern "C" {
    pub fn blkid_partition_get_name(par: blkid_partition)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_partition_get_uuid(par: blkid_partition)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_partition_get_partno(par: blkid_partition)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_partition_get_start(par: blkid_partition) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_partition_get_size(par: blkid_partition) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_partition_get_type(par: blkid_partition)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_partition_get_type_string(par: blkid_partition)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_partition_get_flags(par: blkid_partition)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn blkid_partition_is_logical(par: blkid_partition)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_partition_is_extended(par: blkid_partition)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_partition_is_primary(par: blkid_partition)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_parttable_get_type(tab: blkid_parttable)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_parttable_get_id(tab: blkid_parttable)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn blkid_parttable_get_offset(tab: blkid_parttable) -> blkid_loff_t;
}
extern "C" {
    pub fn blkid_parttable_get_parent(tab: blkid_parttable)
     -> blkid_partition;
}
extern "C" {
    pub fn blkid_do_probe(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_do_safeprobe(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_do_fullprobe(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_numof_values(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_get_value(pr: blkid_probe, num: ::std::os::raw::c_int,
                                 name: *mut *const ::std::os::raw::c_char,
                                 data: *mut *const ::std::os::raw::c_char,
                                 len: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_lookup_value(pr: blkid_probe,
                                    name: *const ::std::os::raw::c_char,
                                    data: *mut *const ::std::os::raw::c_char,
                                    len: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_has_value(pr: blkid_probe,
                                 name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_do_wipe(pr: blkid_probe, dryrun: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_step_back(pr: blkid_probe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_set_request(pr: blkid_probe,
                                   flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_filter_usage(pr: blkid_probe,
                                    flag: ::std::os::raw::c_int,
                                    usage: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_filter_types(pr: blkid_probe,
                                    flag: ::std::os::raw::c_int,
                                    names: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_invert_filter(pr: blkid_probe)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blkid_probe_reset_filter(pr: blkid_probe) -> ::std::os::raw::c_int;
}
